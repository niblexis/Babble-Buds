'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// imports
var PIXI = require('pixi.js');
window.PIXI = PIXI;
window.PIXI["default"] = PIXI;
var timer = require('pixi-timer');
var Puppet = require('./puppet');
var path = require('path');
var trim = require('./../util/trimCanvas');

// Constants
var MOVE_DURATION = 0.75; // in seconds

// Aliases
var BaseTextureCache = PIXI.utils.BaseTextureCache,
    Container = PIXI.Container,
    Sprite = PIXI.Sprite,
    Texture = PIXI.Texture,
    TextureCache = PIXI.utils.TextureCache,
    autoDetectRenderer = PIXI.autoDetectRenderer,
    loader = PIXI.loader,
    Rectangle = PIXI.Rectangle,
    ticker = PIXI.ticker;

/**
 * @class
 */

var Stage = function () {

    /**
     * @param {string} element - the id of the DOM element to append the stage to
     * @param {Object} project - object with information on the assets, puppets, and stage settings
     * @param {Object[]} assets - array of assets
     * @param {string} assetsPath - path to the assets folder
     * @param {requestCallback} callback - function to be called after assets are loaded
     * @param {Object} [status] - object for logging stuff
     * @param {boolean} [enabled=true] - whether or not it should start updating from the start
     */
    function Stage(element, project, assets, assetsPath, callback, status, enabled) {
        var _this = this;

        _classCallCheck(this, Stage);

        this.project = project;
        this.assets = assets;
        this.assetsPath = assetsPath;
        this.status = status;
        this.MOVE_DURATION = MOVE_DURATION;
        this.enabled = enabled === undefined ? true : enabled;

        // Create some basic objects
        this.stage = new Container();
        this.puppetStage = new Container();
        this.stage.addChild(this.puppetStage);
        this.renderer = autoDetectRenderer(1, 1, { transparent: true });
        this.screen = document.getElementById(element);
        this.screen.appendChild(this.renderer.view);

        this.lastFrame = new Date();
        this.puppets = [];
        this.listeners = [];

        // Make the game fit the entire window
        this.renderer.view.style.position = "absolute";
        this.renderer.view.style.display = "block";

        // Load Assets
        if (loader.loading) {
            this.resize();
            if (callback) requestAnimationFrame(function () {
                callback(_this);
            });
            this.gameLoop();
            return;
        }
        var texturesToLoad = false;
        Object.values(assets).forEach(function (asset) {
            if (!TextureCache[path.join(assetsPath, asset.location)]) {
                loader.add(path.join(assetsPath, asset.location));
                texturesToLoad = true;
            }
        });
        var stage = this;
        if (texturesToLoad) {
            loader.onComplete.once(function () {
                stage.resize();
                if (callback) requestAnimationFrame(function () {
                    callback(stage);
                });
                stage.gameLoop();
            });
            loader.load();
        } else {
            loader.load();
            stage.resize();
            if (callback) requestAnimationFrame(function () {
                callback(stage);
            });
            stage.gameLoop();
        }
    }

    _createClass(Stage, [{
        key: 'registerPuppetListener',
        value: function registerPuppetListener(event, callback) {
            this.listeners.push({ "event": event, "callback": callback });
            this.puppets.forEach(function (p) {
                return p.container.on(event, callback);
            });
        }
    }, {
        key: 'addAsset',
        value: function addAsset(id, asset, callback) {
            this.assets[id] = asset;
            var date = new Date();
            TextureCache[path.join(this.assetsPath, asset.location)] = Texture.fromImage(path.join(this.assetsPath, asset.location + "?random=" + date));
            BaseTextureCache[path.join(this.assetsPath, asset.location)] = BaseTextureCache[path.join(this.assetsPath, asset.location + "?random=" + date)];
            if (callback) TextureCache[path.join(this.assetsPath, asset.location)].baseTexture.on('loaded', callback);
        }
    }, {
        key: 'reloadAssets',
        value: function reloadAssets(callback) {
            var _this2 = this;

            Object.keys(TextureCache).forEach(function (k) {
                if (TextureCache[k]) TextureCache[k].destroy(true);
            });

            // Load Assets
            Object.values(this.assets).forEach(function (a) {
                if (!TextureCache[path.join(_this2.assetsPath, a.location)]) TextureCache[path.join(_this2.assetsPath, a.location)] = Texture.fromImage(path.join(_this2.assetsPath, a.location));
            });
            var stage = this;
            var onLoad = function onLoad() {
                if (!Object.values(BaseTextureCache).some(function (a) {
                    return a.isLoading;
                })) {
                    callback(stage);
                    ticker.shared.remove(onLoad);
                }
            };

            this.reloadPuppets();
            if (callback) {
                ticker.shared.add(onLoad);
            }
        }
    }, {
        key: 'updateAsset',
        value: function updateAsset(id) {
            var stage = this;
            var callback = function callback(asset, sprite, layer, emote) {
                var parent = sprite.parent;
                var index = parent.getChildIndex(sprite);
                var newAsset = stage.getAsset(asset, layer, emote);
                parent.removeChildAt(index);
                parent.addChildAt(newAsset, index);
            };
            this.puppets.forEach(function (p) {
                return p.applyToAsset(id, callback);
            });
        }
    }, {
        key: 'reloadPuppets',
        value: function reloadPuppets() {
            var _this3 = this;

            this.puppets.forEach(function (p) {
                return _this3.setPuppet(p.id, _this3.createPuppet(p.puppet));
            });
        }
    }, {
        key: 'reattach',
        value: function reattach(element) {
            this.screen = document.getElementById(element);
            this.screen.appendChild(this.renderer.view);
            this.resize();
        }
    }, {
        key: 'resize',
        value: function resize(e, width, height) {
            var rect = this.screen.getBoundingClientRect();
            this.bounds = {
                width: width || rect.width,
                height: height || rect.height
            };
            this.renderer.resize(this.bounds.width, this.bounds.height);
            this.slotWidth = this.bounds.width / this.project.numCharacters;
            if (this.slotWidth < 400) {
                this.puppetStage.scale.x = this.puppetStage.scale.y = this.slotWidth / 400;
                this.slotWidth = 400;
            } else this.puppetStage.scale.x = this.puppetStage.scale.y = 1;

            this.puppets.forEach(function (p) {
                return p.updatePosition();
            });
        }
    }, {
        key: 'createPuppet',
        value: function createPuppet(puppet) {
            return new Puppet(this, puppet, -1);
        }
    }, {
        key: 'addPuppet',
        value: function addPuppet(puppet, id) {
            var newPuppet = new Puppet(this, puppet, id);
            this.puppets.push(newPuppet);
            this.puppetStage.addChild(newPuppet.container);
            this.listeners.forEach(function (l) {
                return newPuppet.container.on(l.event, l.callback);
            });
            newPuppet.updatePosition();
            return newPuppet;
        }
    }, {
        key: 'removePuppet',
        value: function removePuppet(id) {
            var puppet = this.puppets.find(function (p) {
                return p.id == id;
            });
            if (puppet) {
                this.puppets.splice(this.puppets.indexOf(puppet), 1);
                this.puppetStage.removeChild(puppet.container);
            }
        }
    }, {
        key: 'clearPuppets',
        value: function clearPuppets() {
            while (this.puppets.length !== 0) {
                this.puppetStage.removeChild(this.puppets[0].container);
                this.puppets.splice(0, 1);
            }
        }
    }, {
        key: 'banishPuppets',
        value: function banishPuppets() {
            var _this4 = this;

            this.puppets.forEach(function (puppet) {
                if (puppet.target > _this4.project.numCharacters / 2) {
                    puppet.target = _this4.project.numCharacters + 1;
                    puppet.facingLeft = false;
                    puppet.container.scale.x = _this4.project.puppetScale || 1;
                } else {
                    puppet.target = 0;
                    puppet.facingLeft = true;
                    puppet.container.scale.x = -1 * (_this4.project.puppetScale || 1);
                }
            });
        }
    }, {
        key: 'getPuppet',
        value: function getPuppet(id) {
            return this.puppets.find(function (p) {
                return p.id == id;
            });
        }
    }, {
        key: 'setPuppet',
        value: function setPuppet(id, newPuppet) {
            var oldPuppet = this.getPuppet(id);
            newPuppet.changeEmote(oldPuppet.emote);
            newPuppet.id = newPuppet.container.id = oldPuppet.id;
            newPuppet.position = oldPuppet.position;
            newPuppet.target = oldPuppet.target;
            newPuppet.facingLeft = oldPuppet.facingLeft;
            newPuppet.babbling = oldPuppet.babbling;
            this.listeners.forEach(function (l) {
                return newPuppet.container.on(l.event, l.callback);
            });

            this.puppets[this.puppets.indexOf(oldPuppet)] = newPuppet;
            this.puppetStage.removeChild(oldPuppet.container);
            this.puppetStage.addChild(newPuppet.container);
            this.resize();

            return newPuppet;
        }
    }, {
        key: 'getThumbnail',
        value: function getThumbnail() {
            this.renderer.render(this.stage);
            try {
                return trim(this.renderer.plugins.extract.canvas(this.stage)).canvas.toDataURL().replace(/^data:image\/\w+;base64,/, "");
            } catch (e) {
                this.status.error("Failed to generate thumbnail", e);
                return null;
            }
        }
    }, {
        key: 'gameLoop',
        value: function gameLoop() {
            var thisFrame = new Date();
            var delta = thisFrame - this.lastFrame;
            this.lastFrame = thisFrame;

            requestAnimationFrame(this.gameLoop.bind(this));
            if (this.enabled) this.update(delta);
        }
    }, {
        key: 'getAsset',
        value: function getAsset(container, asset) {
            var sprite = void 0;
            if (this.assets[asset.id]) {
                var assetData = this.assets[asset.id];
                if (assetData.type === "animated") {
                    var base = BaseTextureCache[path.join(this.assetsPath, assetData.location)];
                    var textures = [];
                    var width = base.width / assetData.cols;
                    var height = base.height / assetData.rows;
                    for (var i = 0; i < assetData.numFrames; i++) {
                        if (i % assetData.cols * width + width > base.width || Math.floor(i / assetData.cols) * height + height > base.height) continue;
                        var rect = new Rectangle(i % assetData.cols * width, Math.floor(i / assetData.cols) * height, width, height);
                        textures.push(new Texture(base, rect));
                    }
                    sprite = new PIXI.extras.AnimatedSprite(textures);
                    sprite.animationSpeed = 20 / assetData.delay;
                    sprite.play();
                } else sprite = new Sprite(TextureCache[path.join(this.assetsPath, assetData.location)]);
            } else {
                sprite = new Sprite();
                if (this.status) this.status.log("Unable to load asset \"" + asset.id + "\"", 5, 2);
            }
            sprite.scale.set(asset.scaleX, asset.scaleY);
            sprite.anchor.set(.5, .5);
            container.addChild(sprite);
            container.x = asset.x;
            container.y = asset.y;
            container.rotation = asset.rotation;
            container.asset = asset;
            return container;
        }
    }, {
        key: 'update',
        value: function update(delta) {
            var _this5 = this;

            this.puppets.forEach(function (puppet) {
                // Movement animations
                // I've tried to emulate what puppet pals does as closely as possible
                // But frankly it's difficult to tell
                if (puppet.target != puppet.position || puppet.movingAnim !== 0) {
                    // Whether its going left or right
                    if (puppet.direction === 0 && puppet.target != puppet.position) puppet.direction = puppet.target > puppet.position ? 1 : -1;
                    // Update how far into the animation we are
                    puppet.movingAnim += delta / (1000 * MOVE_DURATION);

                    // We want to do a bit of animation when they arrive at the target slot. 
                    //  in order to do that we have part of the animation (0 - .6) be for each slot
                    //  and the rest (.6 - 1) only plays at the destination slot
                    if (puppet.movingAnim >= 0.6 && puppet.movingAnim - delta / (1000 * MOVE_DURATION) < 0.6) {
                        // Once we pass .6, update our new slot position
                        puppet.position += puppet.direction;
                        puppet.direction = 0;
                        // If we're not at the final slot yet, reset the animation
                        if (puppet.position != puppet.target) puppet.movingAnim = 0;else puppet.container.scale.x = (puppet.facingLeft ? -1 : 1) * (_this5.project.puppetScale || 1);
                    } else if (puppet.movingAnim >= 1) puppet.movingAnim = 0;else if (puppet.movingAnim < 0.6) puppet.container.scale.x = puppet.direction * (_this5.project.puppetScale || 1);

                    // Scale in a sin formation such that it does 3 half circles per slot, plus 2 more at the end
                    puppet.container.scale.y = (1 + Math.sin((1 + puppet.movingAnim * 5) * Math.PI) / 40) * (_this5.project.puppetScale || 1);
                    // Update y value so it doesn't leave the bottom of the screen while bouncing
                    puppet.container.y = _this5.bounds.height / _this5.puppetStage.scale.y;
                    // Linearly move across the slot, unless we're in the (.6 - 1) part of the animation, and ensure we're off screen even when the puppets are large
                    var interpolation = Math.min(1, puppet.movingAnim / 0.6);
                    var pos = puppet.position % (_this5.project.numCharacters + 1);
                    if (pos < 0) pos += _this5.project.numCharacters + 1;
                    var start = pos == 0 ? puppet.direction === 1 ? -Math.abs(puppet.container.width) : // Starting on left edge of screen
                    _this5.project.numCharacters * _this5.slotWidth + Math.abs(puppet.container.width) : // Starting on right edge of screen
                    (pos - 0.5) * _this5.slotWidth; // Ending on screen
                    pos += puppet.direction;
                    if (pos < 0) pos += _this5.project.numCharacters + 1;
                    var end = pos <= 0 ? -Math.abs(puppet.container.width) : // Starting left of screen
                    pos >= _this5.project.numCharacters + 1 ? _this5.project.numCharacters * _this5.slotWidth + Math.abs(puppet.container.width) : // Starting right of screen
                    (pos - 0.5) * _this5.slotWidth; // Ending on screen
                    puppet.container.x = interpolation === 1 ? start : start + (end - start) * interpolation;
                }
                if (puppet.babbling) {
                    // Update how long each face part has been on display
                    puppet.eyesAnim += delta;
                    puppet.mouthAnim += delta;

                    // Update eyes
                    if (puppet.eyesAnim >= puppet.eyesDuration && (puppet.emote === '0' || !puppet.emotes[puppet.emote])) {
                        puppet.updateEyeBabble();
                    }

                    // Update mouth
                    if (puppet.mouthAnim >= puppet.mouthDuration) {
                        puppet.updateMouthBabble();
                    }
                }
                // Update DeadbonesStyle Babbling
                // I'm not sure what Puppet Pals does, but I'm pretty sure this isn't it
                // But I think this looks "close enough", and probably the best I'm going
                // to get without Rob actually telling people how Puppet Pals does it
                if (puppet.deadbonesStyle && (puppet.babbling || puppet.deadbonesDuration !== 0)) {
                    puppet.deadbonesAnim += delta;
                    if (puppet.deadbonesAnim >= puppet.deadbonesDuration) {
                        puppet.deadbonesAnim = 0;
                        if (puppet.babbling) {
                            puppet.deadbonesDuration = 100 + Math.random() * 200;
                            puppet.deadbonesStartY = puppet.deadbonesTargetY;
                            puppet.deadbonesStartRotation = puppet.deadbonesTargetRotation;
                            puppet.head.forEach(function (a) {
                                a.y = a.asset.y + puppet.deadbonesStartY;
                                a.rotation = a.asset.rotation + puppet.deadbonesStartRotation;
                            });
                            puppet.deadbonesTargetY = 10 - Math.random() * 20;
                            puppet.deadbonesTargetRotation = 0.1 - Math.random() * 0.2;
                        } else {
                            puppet.deadbonesDuration = 0;
                            puppet.head.forEach(function (a) {
                                a.y = a.asset.y + puppet.deadbonesTargetY;
                                a.rotation = a.asset.rotation + puppet.deadbonesTargetRotation;
                            });
                        }
                    } else {
                        var percent = puppet.deadbonesAnim / puppet.deadbonesDuration * (puppet.deadbonesAnim / puppet.deadbonesDuration);
                        puppet.head.forEach(function (a) {
                            a.y = a.asset.y + puppet.deadbonesStartY + (puppet.deadbonesTargetY - puppet.deadbonesStartY) * percent;
                            a.rotation = a.asset.rotation + puppet.deadbonesStartRotation + (puppet.deadbonesTargetRotation - puppet.deadbonesStartRotation) * percent;
                        });
                    }
                }
            });
            this.renderer.render(this.stage);
            PIXI.timerManager.update(delta / 1000);
        }
    }]);

    return Stage;
}();

module.exports = Stage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL3N0YWdlLmpzIl0sIm5hbWVzIjpbIlBJWEkiLCJyZXF1aXJlIiwid2luZG93IiwidGltZXIiLCJQdXBwZXQiLCJwYXRoIiwidHJpbSIsIk1PVkVfRFVSQVRJT04iLCJCYXNlVGV4dHVyZUNhY2hlIiwidXRpbHMiLCJDb250YWluZXIiLCJTcHJpdGUiLCJUZXh0dXJlIiwiVGV4dHVyZUNhY2hlIiwiYXV0b0RldGVjdFJlbmRlcmVyIiwibG9hZGVyIiwiUmVjdGFuZ2xlIiwidGlja2VyIiwiU3RhZ2UiLCJlbGVtZW50IiwicHJvamVjdCIsImFzc2V0cyIsImFzc2V0c1BhdGgiLCJjYWxsYmFjayIsInN0YXR1cyIsImVuYWJsZWQiLCJ1bmRlZmluZWQiLCJzdGFnZSIsInB1cHBldFN0YWdlIiwiYWRkQ2hpbGQiLCJyZW5kZXJlciIsInRyYW5zcGFyZW50Iiwic2NyZWVuIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFwcGVuZENoaWxkIiwidmlldyIsImxhc3RGcmFtZSIsIkRhdGUiLCJwdXBwZXRzIiwibGlzdGVuZXJzIiwic3R5bGUiLCJwb3NpdGlvbiIsImRpc3BsYXkiLCJsb2FkaW5nIiwicmVzaXplIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZ2FtZUxvb3AiLCJ0ZXh0dXJlc1RvTG9hZCIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJqb2luIiwiYXNzZXQiLCJsb2NhdGlvbiIsImFkZCIsIm9uQ29tcGxldGUiLCJvbmNlIiwibG9hZCIsImV2ZW50IiwicHVzaCIsInAiLCJjb250YWluZXIiLCJvbiIsImlkIiwiZGF0ZSIsImZyb21JbWFnZSIsImJhc2VUZXh0dXJlIiwia2V5cyIsImsiLCJkZXN0cm95IiwiYSIsIm9uTG9hZCIsInNvbWUiLCJpc0xvYWRpbmciLCJzaGFyZWQiLCJyZW1vdmUiLCJyZWxvYWRQdXBwZXRzIiwic3ByaXRlIiwibGF5ZXIiLCJlbW90ZSIsInBhcmVudCIsImluZGV4IiwiZ2V0Q2hpbGRJbmRleCIsIm5ld0Fzc2V0IiwiZ2V0QXNzZXQiLCJyZW1vdmVDaGlsZEF0IiwiYWRkQ2hpbGRBdCIsImFwcGx5VG9Bc3NldCIsInNldFB1cHBldCIsImNyZWF0ZVB1cHBldCIsInB1cHBldCIsImUiLCJ3aWR0aCIsImhlaWdodCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3VuZHMiLCJzbG90V2lkdGgiLCJudW1DaGFyYWN0ZXJzIiwic2NhbGUiLCJ4IiwieSIsInVwZGF0ZVBvc2l0aW9uIiwibmV3UHVwcGV0IiwibCIsImZpbmQiLCJzcGxpY2UiLCJpbmRleE9mIiwicmVtb3ZlQ2hpbGQiLCJsZW5ndGgiLCJ0YXJnZXQiLCJmYWNpbmdMZWZ0IiwicHVwcGV0U2NhbGUiLCJvbGRQdXBwZXQiLCJnZXRQdXBwZXQiLCJjaGFuZ2VFbW90ZSIsImJhYmJsaW5nIiwicmVuZGVyIiwicGx1Z2lucyIsImV4dHJhY3QiLCJjYW52YXMiLCJ0b0RhdGFVUkwiLCJyZXBsYWNlIiwiZXJyb3IiLCJ0aGlzRnJhbWUiLCJkZWx0YSIsImJpbmQiLCJ1cGRhdGUiLCJhc3NldERhdGEiLCJ0eXBlIiwiYmFzZSIsInRleHR1cmVzIiwiY29scyIsInJvd3MiLCJpIiwibnVtRnJhbWVzIiwiTWF0aCIsImZsb29yIiwiZXh0cmFzIiwiQW5pbWF0ZWRTcHJpdGUiLCJhbmltYXRpb25TcGVlZCIsImRlbGF5IiwicGxheSIsImxvZyIsInNldCIsInNjYWxlWCIsInNjYWxlWSIsImFuY2hvciIsInJvdGF0aW9uIiwibW92aW5nQW5pbSIsImRpcmVjdGlvbiIsInNpbiIsIlBJIiwiaW50ZXJwb2xhdGlvbiIsIm1pbiIsInBvcyIsInN0YXJ0IiwiYWJzIiwiZW5kIiwiZXllc0FuaW0iLCJtb3V0aEFuaW0iLCJleWVzRHVyYXRpb24iLCJlbW90ZXMiLCJ1cGRhdGVFeWVCYWJibGUiLCJtb3V0aER1cmF0aW9uIiwidXBkYXRlTW91dGhCYWJibGUiLCJkZWFkYm9uZXNTdHlsZSIsImRlYWRib25lc0R1cmF0aW9uIiwiZGVhZGJvbmVzQW5pbSIsInJhbmRvbSIsImRlYWRib25lc1N0YXJ0WSIsImRlYWRib25lc1RhcmdldFkiLCJkZWFkYm9uZXNTdGFydFJvdGF0aW9uIiwiZGVhZGJvbmVzVGFyZ2V0Um90YXRpb24iLCJoZWFkIiwicGVyY2VudCIsInRpbWVyTWFuYWdlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0EsSUFBTUEsT0FBT0MsUUFBUSxTQUFSLENBQWI7QUFDQUMsT0FBT0YsSUFBUCxHQUFjQSxJQUFkO0FBQ0FFLE9BQU9GLElBQVAsQ0FBYSxTQUFiLElBQTJCQSxJQUEzQjtBQUNBLElBQU1HLFFBQVFGLFFBQVEsWUFBUixDQUFkO0FBQ0EsSUFBTUcsU0FBU0gsUUFBUSxVQUFSLENBQWY7QUFDQSxJQUFNSSxPQUFPSixRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU1LLE9BQU9MLFFBQVEsc0JBQVIsQ0FBYjs7QUFFQTtBQUNBLElBQU1NLGdCQUFnQixJQUF0QixDLENBQTJCOztBQUUzQjtBQUNBLElBQUlDLG1CQUFtQlIsS0FBS1MsS0FBTCxDQUFXRCxnQkFBbEM7QUFBQSxJQUNJRSxZQUFZVixLQUFLVSxTQURyQjtBQUFBLElBRUlDLFNBQVNYLEtBQUtXLE1BRmxCO0FBQUEsSUFHSUMsVUFBVVosS0FBS1ksT0FIbkI7QUFBQSxJQUlJQyxlQUFlYixLQUFLUyxLQUFMLENBQVdJLFlBSjlCO0FBQUEsSUFLSUMscUJBQXFCZCxLQUFLYyxrQkFMOUI7QUFBQSxJQU1JQyxTQUFTZixLQUFLZSxNQU5sQjtBQUFBLElBT0lDLFlBQVloQixLQUFLZ0IsU0FQckI7QUFBQSxJQVFJQyxTQUFTakIsS0FBS2lCLE1BUmxCOztBQVVBOzs7O0lBR01DLEs7O0FBRUY7Ozs7Ozs7OztBQVNBLG1CQUFZQyxPQUFaLEVBQXFCQyxPQUFyQixFQUE4QkMsTUFBOUIsRUFBc0NDLFVBQXRDLEVBQWtEQyxRQUFsRCxFQUE0REMsTUFBNUQsRUFBb0VDLE9BQXBFLEVBQTZFO0FBQUE7O0FBQUE7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QWpDO0FBQ0g7Ozs7OztBQUdMb0QsT0FBT0MsT0FBUCxHQUFpQmpLLEtBQWpCIiwiZmlsZSI6InN0YWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0c1xuY29uc3QgUElYSSA9IHJlcXVpcmUoJ3BpeGkuanMnKVxud2luZG93LlBJWEkgPSBQSVhJO1xud2luZG93LlBJWElbIFwiZGVmYXVsdFwiIF0gPSBQSVhJO1xuY29uc3QgdGltZXIgPSByZXF1aXJlKCdwaXhpLXRpbWVyJylcbmNvbnN0IFB1cHBldCA9IHJlcXVpcmUoJy4vcHVwcGV0JylcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IHRyaW0gPSByZXF1aXJlKCcuLy4uL3V0aWwvdHJpbUNhbnZhcycpXG5cbi8vIENvbnN0YW50c1xuY29uc3QgTU9WRV9EVVJBVElPTiA9IDAuNzUgLy8gaW4gc2Vjb25kc1xuXG4vLyBBbGlhc2VzXG5sZXQgQmFzZVRleHR1cmVDYWNoZSA9IFBJWEkudXRpbHMuQmFzZVRleHR1cmVDYWNoZSxcbiAgICBDb250YWluZXIgPSBQSVhJLkNvbnRhaW5lcixcbiAgICBTcHJpdGUgPSBQSVhJLlNwcml0ZSxcbiAgICBUZXh0dXJlID0gUElYSS5UZXh0dXJlLFxuICAgIFRleHR1cmVDYWNoZSA9IFBJWEkudXRpbHMuVGV4dHVyZUNhY2hlLFxuICAgIGF1dG9EZXRlY3RSZW5kZXJlciA9IFBJWEkuYXV0b0RldGVjdFJlbmRlcmVyLFxuICAgIGxvYWRlciA9IFBJWEkubG9hZGVyLFxuICAgIFJlY3RhbmdsZSA9IFBJWEkuUmVjdGFuZ2xlLFxuICAgIHRpY2tlciA9IFBJWEkudGlja2VyXG5cbi8qKlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIFN0YWdlIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50IC0gdGhlIGlkIG9mIHRoZSBET00gZWxlbWVudCB0byBhcHBlbmQgdGhlIHN0YWdlIHRvXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb2plY3QgLSBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBvbiB0aGUgYXNzZXRzLCBwdXBwZXRzLCBhbmQgc3RhZ2Ugc2V0dGluZ3NcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBhc3NldHMgLSBhcnJheSBvZiBhc3NldHNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXNzZXRzUGF0aCAtIHBhdGggdG8gdGhlIGFzc2V0cyBmb2xkZXJcbiAgICAgKiBAcGFyYW0ge3JlcXVlc3RDYWxsYmFja30gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgYXNzZXRzIGFyZSBsb2FkZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YXR1c10gLSBvYmplY3QgZm9yIGxvZ2dpbmcgc3R1ZmZcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtlbmFibGVkPXRydWVdIC0gd2hldGhlciBvciBub3QgaXQgc2hvdWxkIHN0YXJ0IHVwZGF0aW5nIGZyb20gdGhlIHN0YXJ0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgcHJvamVjdCwgYXNzZXRzLCBhc3NldHNQYXRoLCBjYWxsYmFjaywgc3RhdHVzLCBlbmFibGVkKSB7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3RcbiAgICAgICAgdGhpcy5hc3NldHMgPSBhc3NldHNcbiAgICAgICAgdGhpcy5hc3NldHNQYXRoID0gYXNzZXRzUGF0aFxuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1c1xuICAgICAgICB0aGlzLk1PVkVfRFVSQVRJT04gPSBNT1ZFX0RVUkFUSU9OXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGVuYWJsZWQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBlbmFibGVkXG5cbiAgICAgICAgLy8gQ3JlYXRlIHNvbWUgYmFzaWMgb2JqZWN0c1xuICAgICAgICB0aGlzLnN0YWdlID0gbmV3IENvbnRhaW5lcigpXG4gICAgICAgIHRoaXMucHVwcGV0U3RhZ2UgPSBuZXcgQ29udGFpbmVyKClcbiAgICAgICAgdGhpcy5zdGFnZS5hZGRDaGlsZCh0aGlzLnB1cHBldFN0YWdlKVxuICAgICAgICB0aGlzLnJlbmRlcmVyID0gYXV0b0RldGVjdFJlbmRlcmVyKDEsIDEsIHt0cmFuc3BhcmVudDogdHJ1ZX0pXG4gICAgICAgIHRoaXMuc2NyZWVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudClcbiAgICAgICAgdGhpcy5zY3JlZW4uYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJlci52aWV3KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5sYXN0RnJhbWUgPSBuZXcgRGF0ZSgpXG4gICAgICAgIHRoaXMucHVwcGV0cyA9IFtdXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW11cblxuICAgICAgICAvLyBNYWtlIHRoZSBnYW1lIGZpdCB0aGUgZW50aXJlIHdpbmRvd1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnZpZXcuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIHRoaXMucmVuZGVyZXIudmlldy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgICAgIC8vIExvYWQgQXNzZXRzXG4gICAgICAgIGlmIChsb2FkZXIubG9hZGluZykge1xuICAgICAgICAgICAgdGhpcy5yZXNpemUoKVxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge2NhbGxiYWNrKHRoaXMpfSlcbiAgICAgICAgICAgIHRoaXMuZ2FtZUxvb3AoKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRleHR1cmVzVG9Mb2FkID0gZmFsc2VcbiAgICAgICAgT2JqZWN0LnZhbHVlcyhhc3NldHMpLmZvckVhY2goYXNzZXQgPT4ge1xuICAgICAgICAgICAgaWYgKCFUZXh0dXJlQ2FjaGVbcGF0aC5qb2luKGFzc2V0c1BhdGgsIGFzc2V0LmxvY2F0aW9uKV0pIHtcbiAgICAgICAgICAgICAgICBsb2FkZXIuYWRkKHBhdGguam9pbihhc3NldHNQYXRoLCBhc3NldC5sb2NhdGlvbikpXG4gICAgICAgICAgICAgICAgdGV4dHVyZXNUb0xvYWQgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGxldCBzdGFnZSA9IHRoaXNcbiAgICAgICAgaWYgKHRleHR1cmVzVG9Mb2FkKSB7XG4gICAgICAgICAgICBsb2FkZXIub25Db21wbGV0ZS5vbmNlKGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgICAgICBzdGFnZS5yZXNpemUoKVxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtjYWxsYmFjayhzdGFnZSl9KVxuICAgICAgICAgICAgICAgIHN0YWdlLmdhbWVMb29wKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBsb2FkZXIubG9hZCgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2FkZXIubG9hZCgpXG4gICAgICAgICAgICBzdGFnZS5yZXNpemUoKVxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge2NhbGxiYWNrKHN0YWdlKX0pXG4gICAgICAgICAgICBzdGFnZS5nYW1lTG9vcCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWdpc3RlclB1cHBldExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKHtcImV2ZW50XCI6IGV2ZW50LCBcImNhbGxiYWNrXCI6IGNhbGxiYWNrfSlcbiAgICAgICAgdGhpcy5wdXBwZXRzLmZvckVhY2gocCA9PiBwLmNvbnRhaW5lci5vbihldmVudCwgY2FsbGJhY2spKVxuICAgIH1cblxuICAgIGFkZEFzc2V0KGlkLCBhc3NldCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5hc3NldHNbaWRdID0gYXNzZXRcbiAgICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpXG4gICAgICAgIFRleHR1cmVDYWNoZVtwYXRoLmpvaW4odGhpcy5hc3NldHNQYXRoLCBhc3NldC5sb2NhdGlvbildID1cbiAgICAgICAgICAgIFRleHR1cmUuZnJvbUltYWdlKHBhdGguam9pbih0aGlzLmFzc2V0c1BhdGgsIGFzc2V0LmxvY2F0aW9uICsgXCI/cmFuZG9tPVwiICsgZGF0ZSkpXG4gICAgICAgIEJhc2VUZXh0dXJlQ2FjaGVbcGF0aC5qb2luKHRoaXMuYXNzZXRzUGF0aCwgYXNzZXQubG9jYXRpb24pXSA9XG4gICAgICAgICAgICBCYXNlVGV4dHVyZUNhY2hlW3BhdGguam9pbih0aGlzLmFzc2V0c1BhdGgsIGFzc2V0LmxvY2F0aW9uICsgXCI/cmFuZG9tPVwiICsgZGF0ZSldXG4gICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgIFRleHR1cmVDYWNoZVtwYXRoLmpvaW4odGhpcy5hc3NldHNQYXRoLCBhc3NldC5sb2NhdGlvbildLmJhc2VUZXh0dXJlLm9uKCdsb2FkZWQnLCBjYWxsYmFjaylcbiAgICB9XG5cbiAgICByZWxvYWRBc3NldHMoY2FsbGJhY2spIHtcbiAgICAgICAgT2JqZWN0LmtleXMoVGV4dHVyZUNhY2hlKS5mb3JFYWNoKGsgPT4ge2lmIChUZXh0dXJlQ2FjaGVba10pIFRleHR1cmVDYWNoZVtrXS5kZXN0cm95KHRydWUpfSlcblxuICAgICAgICAvLyBMb2FkIEFzc2V0c1xuICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuYXNzZXRzKS5mb3JFYWNoKGEgPT4ge1xuICAgICAgICAgICAgaWYgKCFUZXh0dXJlQ2FjaGVbcGF0aC5qb2luKHRoaXMuYXNzZXRzUGF0aCwgYS5sb2NhdGlvbildKVxuICAgICAgICAgICAgICAgIFRleHR1cmVDYWNoZVtwYXRoLmpvaW4odGhpcy5hc3NldHNQYXRoLCBhLmxvY2F0aW9uKV0gPVxuICAgICAgICAgICAgICAgICAgICBUZXh0dXJlLmZyb21JbWFnZShwYXRoLmpvaW4odGhpcy5hc3NldHNQYXRoLCBhLmxvY2F0aW9uKSlcbiAgICAgICAgfSlcbiAgICAgICAgbGV0IHN0YWdlID0gdGhpc1xuICAgICAgICBsZXQgb25Mb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFPYmplY3QudmFsdWVzKEJhc2VUZXh0dXJlQ2FjaGUpLnNvbWUoYSA9PiBhLmlzTG9hZGluZykpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhzdGFnZSlcbiAgICAgICAgICAgICAgICB0aWNrZXIuc2hhcmVkLnJlbW92ZShvbkxvYWQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbG9hZFB1cHBldHMoKVxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRpY2tlci5zaGFyZWQuYWRkKG9uTG9hZClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUFzc2V0KGlkKSB7XG4gICAgICAgIGxldCBzdGFnZSA9IHRoaXNcbiAgICAgICAgbGV0IGNhbGxiYWNrID0gZnVuY3Rpb24oYXNzZXQsIHNwcml0ZSwgbGF5ZXIsIGVtb3RlKSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gc3ByaXRlLnBhcmVudFxuICAgICAgICAgICAgbGV0IGluZGV4ID0gcGFyZW50LmdldENoaWxkSW5kZXgoc3ByaXRlKVxuICAgICAgICAgICAgbGV0IG5ld0Fzc2V0ID0gc3RhZ2UuZ2V0QXNzZXQoYXNzZXQsIGxheWVyLCBlbW90ZSlcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZEF0KGluZGV4KVxuICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkQXQobmV3QXNzZXQsIGluZGV4KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVwcGV0cy5mb3JFYWNoKHAgPT4gcC5hcHBseVRvQXNzZXQoaWQsIGNhbGxiYWNrKSlcbiAgICB9XG5cbiAgICByZWxvYWRQdXBwZXRzKCkge1xuICAgICAgICB0aGlzLnB1cHBldHMuZm9yRWFjaChwID0+IHRoaXMuc2V0UHVwcGV0KHAuaWQsIHRoaXMuY3JlYXRlUHVwcGV0KHAucHVwcGV0KSkpXG4gICAgfVxuXG4gICAgcmVhdHRhY2goZWxlbWVudCkge1xuICAgICAgICB0aGlzLnNjcmVlbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnQpXG4gICAgICAgIHRoaXMuc2NyZWVuLmFwcGVuZENoaWxkKHRoaXMucmVuZGVyZXIudmlldylcbiAgICAgICAgdGhpcy5yZXNpemUoKVxuICAgIH1cblxuICAgIHJlc2l6ZShlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGxldCByZWN0ID0gdGhpcy5zY3JlZW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgdGhpcy5ib3VuZHMgPSB7XG4gICAgICAgICAgICB3aWR0aDogd2lkdGggfHwgcmVjdC53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0IHx8IHJlY3QuaGVpZ2h0XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZXNpemUodGhpcy5ib3VuZHMud2lkdGgsIHRoaXMuYm91bmRzLmhlaWdodClcbiAgICAgICAgdGhpcy5zbG90V2lkdGggPSB0aGlzLmJvdW5kcy53aWR0aCAvIHRoaXMucHJvamVjdC5udW1DaGFyYWN0ZXJzXG4gICAgICAgIGlmICh0aGlzLnNsb3RXaWR0aCA8IDQwMCkge1xuICAgICAgICAgICAgdGhpcy5wdXBwZXRTdGFnZS5zY2FsZS54ID0gdGhpcy5wdXBwZXRTdGFnZS5zY2FsZS55ID0gdGhpcy5zbG90V2lkdGggLyA0MDBcbiAgICAgICAgICAgIHRoaXMuc2xvdFdpZHRoID0gNDAwXG4gICAgICAgIH0gZWxzZSB0aGlzLnB1cHBldFN0YWdlLnNjYWxlLnggPSB0aGlzLnB1cHBldFN0YWdlLnNjYWxlLnkgPSAxXG5cbiAgICAgICAgdGhpcy5wdXBwZXRzLmZvckVhY2gocCA9PiBwLnVwZGF0ZVBvc2l0aW9uKCkpXG4gICAgfVxuXG4gICAgY3JlYXRlUHVwcGV0KHB1cHBldCkge1xuICAgICAgICByZXR1cm4gbmV3IFB1cHBldCh0aGlzLCBwdXBwZXQsIC0xKVxuICAgIH1cblxuICAgIGFkZFB1cHBldChwdXBwZXQsIGlkKSB7XG4gICAgICAgIGxldCBuZXdQdXBwZXQgPSBuZXcgUHVwcGV0KHRoaXMsIHB1cHBldCwgaWQpXG4gICAgICAgIHRoaXMucHVwcGV0cy5wdXNoKG5ld1B1cHBldClcbiAgICAgICAgdGhpcy5wdXBwZXRTdGFnZS5hZGRDaGlsZChuZXdQdXBwZXQuY29udGFpbmVyKVxuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGwgPT4gbmV3UHVwcGV0LmNvbnRhaW5lci5vbihsLmV2ZW50LCBsLmNhbGxiYWNrKSlcbiAgICAgICAgbmV3UHVwcGV0LnVwZGF0ZVBvc2l0aW9uKClcbiAgICAgICAgcmV0dXJuIG5ld1B1cHBldFxuICAgIH1cblxuICAgIHJlbW92ZVB1cHBldChpZCkge1xuICAgICAgICBjb25zdCBwdXBwZXQgPSB0aGlzLnB1cHBldHMuZmluZChwID0+IHAuaWQgPT0gaWQpXG4gICAgICAgIGlmIChwdXBwZXQpIHtcbiAgICAgICAgICAgIHRoaXMucHVwcGV0cy5zcGxpY2UodGhpcy5wdXBwZXRzLmluZGV4T2YocHVwcGV0KSwgMSlcbiAgICAgICAgICAgIHRoaXMucHVwcGV0U3RhZ2UucmVtb3ZlQ2hpbGQocHVwcGV0LmNvbnRhaW5lcilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyUHVwcGV0cygpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMucHVwcGV0cy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucHVwcGV0U3RhZ2UucmVtb3ZlQ2hpbGQodGhpcy5wdXBwZXRzWzBdLmNvbnRhaW5lcilcbiAgICAgICAgICAgIHRoaXMucHVwcGV0cy5zcGxpY2UoMCwgMSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJhbmlzaFB1cHBldHMoKSB7XG4gICAgICAgIHRoaXMucHVwcGV0cy5mb3JFYWNoKHB1cHBldCA9PiB7XG4gICAgICAgICAgICBpZiAocHVwcGV0LnRhcmdldCA+IHRoaXMucHJvamVjdC5udW1DaGFyYWN0ZXJzIC8gMikge1xuICAgICAgICAgICAgICAgIHB1cHBldC50YXJnZXQgPSB0aGlzLnByb2plY3QubnVtQ2hhcmFjdGVycyArIDFcbiAgICAgICAgICAgICAgICBwdXBwZXQuZmFjaW5nTGVmdCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgcHVwcGV0LmNvbnRhaW5lci5zY2FsZS54ID0gdGhpcy5wcm9qZWN0LnB1cHBldFNjYWxlIHx8IDFcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHVwcGV0LnRhcmdldCA9IDBcbiAgICAgICAgICAgICAgICBwdXBwZXQuZmFjaW5nTGVmdCA9IHRydWVcbiAgICAgICAgICAgICAgICBwdXBwZXQuY29udGFpbmVyLnNjYWxlLnggPSAtMSAqICh0aGlzLnByb2plY3QucHVwcGV0U2NhbGUgfHwgMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBnZXRQdXBwZXQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVwcGV0cy5maW5kKHAgPT4gcC5pZCA9PSBpZClcbiAgICB9XG5cbiAgICBzZXRQdXBwZXQoaWQsIG5ld1B1cHBldCkge1xuICAgICAgICBsZXQgb2xkUHVwcGV0ID0gdGhpcy5nZXRQdXBwZXQoaWQpXG4gICAgICAgIG5ld1B1cHBldC5jaGFuZ2VFbW90ZShvbGRQdXBwZXQuZW1vdGUpXG4gICAgICAgIG5ld1B1cHBldC5pZCA9IG5ld1B1cHBldC5jb250YWluZXIuaWQgPSBvbGRQdXBwZXQuaWRcbiAgICAgICAgbmV3UHVwcGV0LnBvc2l0aW9uID0gb2xkUHVwcGV0LnBvc2l0aW9uXG4gICAgICAgIG5ld1B1cHBldC50YXJnZXQgPSBvbGRQdXBwZXQudGFyZ2V0XG4gICAgICAgIG5ld1B1cHBldC5mYWNpbmdMZWZ0ID0gb2xkUHVwcGV0LmZhY2luZ0xlZnRcbiAgICAgICAgbmV3UHVwcGV0LmJhYmJsaW5nID0gb2xkUHVwcGV0LmJhYmJsaW5nXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2gobCA9PiBuZXdQdXBwZXQuY29udGFpbmVyLm9uKGwuZXZlbnQsIGwuY2FsbGJhY2spKVxuXG4gICAgICAgIHRoaXMucHVwcGV0c1t0aGlzLnB1cHBldHMuaW5kZXhPZihvbGRQdXBwZXQpXSA9IG5ld1B1cHBldFxuICAgICAgICB0aGlzLnB1cHBldFN0YWdlLnJlbW92ZUNoaWxkKG9sZFB1cHBldC5jb250YWluZXIpXG4gICAgICAgIHRoaXMucHVwcGV0U3RhZ2UuYWRkQ2hpbGQobmV3UHVwcGV0LmNvbnRhaW5lcilcbiAgICAgICAgdGhpcy5yZXNpemUoKVxuXG4gICAgICAgIHJldHVybiBuZXdQdXBwZXRcbiAgICB9XG5cbiAgICBnZXRUaHVtYm5haWwoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc3RhZ2UpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdHJpbSh0aGlzLnJlbmRlcmVyLnBsdWdpbnMuZXh0cmFjdC5jYW52YXModGhpcy5zdGFnZSkpLmNhbnZhcy50b0RhdGFVUkwoKS5yZXBsYWNlKC9eZGF0YTppbWFnZVxcL1xcdys7YmFzZTY0LC8sIFwiXCIpXG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMuZXJyb3IoXCJGYWlsZWQgdG8gZ2VuZXJhdGUgdGh1bWJuYWlsXCIsIGUpXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2FtZUxvb3AoKSB7XG4gICAgICAgIGxldCB0aGlzRnJhbWUgPSBuZXcgRGF0ZSgpXG4gICAgICAgIGxldCBkZWx0YSA9IHRoaXNGcmFtZSAtIHRoaXMubGFzdEZyYW1lXG4gICAgICAgIHRoaXMubGFzdEZyYW1lID0gdGhpc0ZyYW1lXG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuZ2FtZUxvb3AuYmluZCh0aGlzKSlcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlZCkgdGhpcy51cGRhdGUoZGVsdGEpXG4gICAgfVxuXG4gICAgZ2V0QXNzZXQoY29udGFpbmVyLCBhc3NldCkge1xuICAgICAgICBsZXQgc3ByaXRlXG4gICAgICAgIGlmICh0aGlzLmFzc2V0c1thc3NldC5pZF0pIHtcbiAgICAgICAgICAgIGxldCBhc3NldERhdGEgPSB0aGlzLmFzc2V0c1thc3NldC5pZF1cbiAgICAgICAgICAgIGlmIChhc3NldERhdGEudHlwZSA9PT0gXCJhbmltYXRlZFwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJhc2UgPSBCYXNlVGV4dHVyZUNhY2hlW3BhdGguam9pbih0aGlzLmFzc2V0c1BhdGgsIGFzc2V0RGF0YS5sb2NhdGlvbildXG4gICAgICAgICAgICAgICAgbGV0IHRleHR1cmVzID0gW11cbiAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSBiYXNlLndpZHRoIC8gYXNzZXREYXRhLmNvbHNcbiAgICAgICAgICAgICAgICBsZXQgaGVpZ2h0ID0gYmFzZS5oZWlnaHQgLyBhc3NldERhdGEucm93c1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXNzZXREYXRhLm51bUZyYW1lczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoaSAlIGFzc2V0RGF0YS5jb2xzKSAqIHdpZHRoICsgd2lkdGggPiBiYXNlLndpZHRoIHx8IE1hdGguZmxvb3IoaSAvIGFzc2V0RGF0YS5jb2xzKSAqIGhlaWdodCArIGhlaWdodCA+IGJhc2UuaGVpZ2h0KSBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjdCA9IG5ldyBSZWN0YW5nbGUoKGkgJSBhc3NldERhdGEuY29scykgKiB3aWR0aCwgTWF0aC5mbG9vcihpIC8gYXNzZXREYXRhLmNvbHMpICogaGVpZ2h0LCB3aWR0aCwgaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlcy5wdXNoKG5ldyBUZXh0dXJlKGJhc2UsIHJlY3QpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzcHJpdGUgPSBuZXcgUElYSS5leHRyYXMuQW5pbWF0ZWRTcHJpdGUodGV4dHVyZXMpXG4gICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvblNwZWVkID0gMjAgLyBhc3NldERhdGEuZGVsYXlcbiAgICAgICAgICAgICAgICBzcHJpdGUucGxheSgpXG4gICAgICAgICAgICB9IGVsc2Ugc3ByaXRlID0gbmV3IFNwcml0ZShUZXh0dXJlQ2FjaGVbcGF0aC5qb2luKHRoaXMuYXNzZXRzUGF0aCwgYXNzZXREYXRhLmxvY2F0aW9uKV0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcHJpdGUgPSBuZXcgU3ByaXRlKClcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cykgdGhpcy5zdGF0dXMubG9nKFwiVW5hYmxlIHRvIGxvYWQgYXNzZXQgXFxcIlwiICsgYXNzZXQuaWQgKyBcIlxcXCJcIiwgNSwgMilcbiAgICAgICAgfVxuICAgICAgICBzcHJpdGUuc2NhbGUuc2V0KGFzc2V0LnNjYWxlWCwgYXNzZXQuc2NhbGVZKVxuICAgICAgICBzcHJpdGUuYW5jaG9yLnNldCguNSwgLjUpXG4gICAgICAgIGNvbnRhaW5lci5hZGRDaGlsZChzcHJpdGUpXG4gICAgICAgIGNvbnRhaW5lci54ID0gYXNzZXQueFxuICAgICAgICBjb250YWluZXIueSA9IGFzc2V0LnlcbiAgICAgICAgY29udGFpbmVyLnJvdGF0aW9uID0gYXNzZXQucm90YXRpb25cbiAgICAgICAgY29udGFpbmVyLmFzc2V0ID0gYXNzZXRcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lclxuICAgIH1cblxuICAgIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICB0aGlzLnB1cHBldHMuZm9yRWFjaChwdXBwZXQgPT4ge1xuICAgICAgICAgICAgLy8gTW92ZW1lbnQgYW5pbWF0aW9uc1xuICAgICAgICAgICAgLy8gSSd2ZSB0cmllZCB0byBlbXVsYXRlIHdoYXQgcHVwcGV0IHBhbHMgZG9lcyBhcyBjbG9zZWx5IGFzIHBvc3NpYmxlXG4gICAgICAgICAgICAvLyBCdXQgZnJhbmtseSBpdCdzIGRpZmZpY3VsdCB0byB0ZWxsXG4gICAgICAgICAgICBpZiAocHVwcGV0LnRhcmdldCAhPSBwdXBwZXQucG9zaXRpb24gfHwgcHVwcGV0Lm1vdmluZ0FuaW0gIT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBXaGV0aGVyIGl0cyBnb2luZyBsZWZ0IG9yIHJpZ2h0XG4gICAgICAgICAgICAgICAgaWYgKHB1cHBldC5kaXJlY3Rpb24gPT09IDAgJiYgcHVwcGV0LnRhcmdldCAhPSBwdXBwZXQucG9zaXRpb24pXG4gICAgICAgICAgICAgICAgICAgIHB1cHBldC5kaXJlY3Rpb24gPSBwdXBwZXQudGFyZ2V0ID4gcHVwcGV0LnBvc2l0aW9uID8gMSA6IC0xXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGhvdyBmYXIgaW50byB0aGUgYW5pbWF0aW9uIHdlIGFyZVxuICAgICAgICAgICAgICAgIHB1cHBldC5tb3ZpbmdBbmltICs9IGRlbHRhIC8gKDEwMDAgKiBNT1ZFX0RVUkFUSU9OKVxuXG4gICAgICAgICAgICAgICAgLy8gV2Ugd2FudCB0byBkbyBhIGJpdCBvZiBhbmltYXRpb24gd2hlbiB0aGV5IGFycml2ZSBhdCB0aGUgdGFyZ2V0IHNsb3QuIFxuICAgICAgICAgICAgICAgIC8vICBpbiBvcmRlciB0byBkbyB0aGF0IHdlIGhhdmUgcGFydCBvZiB0aGUgYW5pbWF0aW9uICgwIC0gLjYpIGJlIGZvciBlYWNoIHNsb3RcbiAgICAgICAgICAgICAgICAvLyAgYW5kIHRoZSByZXN0ICguNiAtIDEpIG9ubHkgcGxheXMgYXQgdGhlIGRlc3RpbmF0aW9uIHNsb3RcbiAgICAgICAgICAgICAgICBpZiAocHVwcGV0Lm1vdmluZ0FuaW0gPj0gMC42ICYmIHB1cHBldC5tb3ZpbmdBbmltIC0gZGVsdGEgLyAoMTAwMCAqIE1PVkVfRFVSQVRJT04pIDwgMC42KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9uY2Ugd2UgcGFzcyAuNiwgdXBkYXRlIG91ciBuZXcgc2xvdCBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBwdXBwZXQucG9zaXRpb24gKz0gcHVwcGV0LmRpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICBwdXBwZXQuZGlyZWN0aW9uID0gMFxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBub3QgYXQgdGhlIGZpbmFsIHNsb3QgeWV0LCByZXNldCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChwdXBwZXQucG9zaXRpb24gIT0gcHVwcGV0LnRhcmdldCkgcHVwcGV0Lm1vdmluZ0FuaW0gPSAwXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcHVwcGV0LmNvbnRhaW5lci5zY2FsZS54ID0gKHB1cHBldC5mYWNpbmdMZWZ0ID8gLTEgOiAxKSAqICh0aGlzLnByb2plY3QucHVwcGV0U2NhbGUgfHwgMSlcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHB1cHBldC5tb3ZpbmdBbmltID49IDEpIHB1cHBldC5tb3ZpbmdBbmltID0gMFxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHB1cHBldC5tb3ZpbmdBbmltIDwgMC42KSBwdXBwZXQuY29udGFpbmVyLnNjYWxlLnggPSBwdXBwZXQuZGlyZWN0aW9uICogKHRoaXMucHJvamVjdC5wdXBwZXRTY2FsZSB8fCAxKVxuXG4gICAgICAgICAgICAgICAgLy8gU2NhbGUgaW4gYSBzaW4gZm9ybWF0aW9uIHN1Y2ggdGhhdCBpdCBkb2VzIDMgaGFsZiBjaXJjbGVzIHBlciBzbG90LCBwbHVzIDIgbW9yZSBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgcHVwcGV0LmNvbnRhaW5lci5zY2FsZS55ID0gKDEgKyBNYXRoLnNpbigoMSArIHB1cHBldC5tb3ZpbmdBbmltICogNSkgKiBNYXRoLlBJKSAvIDQwKSAqICh0aGlzLnByb2plY3QucHVwcGV0U2NhbGUgfHwgMSkgXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHkgdmFsdWUgc28gaXQgZG9lc24ndCBsZWF2ZSB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gd2hpbGUgYm91bmNpbmdcbiAgICAgICAgICAgICAgICBwdXBwZXQuY29udGFpbmVyLnkgPSB0aGlzLmJvdW5kcy5oZWlnaHQgLyB0aGlzLnB1cHBldFN0YWdlLnNjYWxlLnlcbiAgICAgICAgICAgICAgICAvLyBMaW5lYXJseSBtb3ZlIGFjcm9zcyB0aGUgc2xvdCwgdW5sZXNzIHdlJ3JlIGluIHRoZSAoLjYgLSAxKSBwYXJ0IG9mIHRoZSBhbmltYXRpb24sIGFuZCBlbnN1cmUgd2UncmUgb2ZmIHNjcmVlbiBldmVuIHdoZW4gdGhlIHB1cHBldHMgYXJlIGxhcmdlXG4gICAgICAgICAgICAgICAgbGV0IGludGVycG9sYXRpb24gPSBNYXRoLm1pbigxLCBwdXBwZXQubW92aW5nQW5pbSAvIDAuNilcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gcHVwcGV0LnBvc2l0aW9uICUgKHRoaXMucHJvamVjdC5udW1DaGFyYWN0ZXJzICsgMSlcbiAgICAgICAgICAgICAgICBpZiAocG9zIDwgMCkgcG9zICs9IHRoaXMucHJvamVjdC5udW1DaGFyYWN0ZXJzICsgMVxuICAgICAgICAgICAgICAgIGxldCBzdGFydCA9IHBvcyA9PSAwID9cbiAgICAgICAgICAgICAgICAgICAgcHVwcGV0LmRpcmVjdGlvbiA9PT0gMSA/IC0gTWF0aC5hYnMocHVwcGV0LmNvbnRhaW5lci53aWR0aCkgOiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0YXJ0aW5nIG9uIGxlZnQgZWRnZSBvZiBzY3JlZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdC5udW1DaGFyYWN0ZXJzICogdGhpcy5zbG90V2lkdGggKyBNYXRoLmFicyhwdXBwZXQuY29udGFpbmVyLndpZHRoKSA6IC8vIFN0YXJ0aW5nIG9uIHJpZ2h0IGVkZ2Ugb2Ygc2NyZWVuXG4gICAgICAgICAgICAgICAgICAgIChwb3MgLSAwLjUpICogdGhpcy5zbG90V2lkdGggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmRpbmcgb24gc2NyZWVuXG4gICAgICAgICAgICAgICAgcG9zICs9IHB1cHBldC5kaXJlY3Rpb25cbiAgICAgICAgICAgICAgICBpZiAocG9zIDwgMCkgcG9zICs9IHRoaXMucHJvamVjdC5udW1DaGFyYWN0ZXJzICsgMVxuICAgICAgICAgICAgICAgIGxldCBlbmQgPSBwb3MgPD0gMCA/IC0gTWF0aC5hYnMocHVwcGV0LmNvbnRhaW5lci53aWR0aCkgOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdGFydGluZyBsZWZ0IG9mIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICBwb3MgPj0gdGhpcy5wcm9qZWN0Lm51bUNoYXJhY3RlcnMgKyAxID8gXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdC5udW1DaGFyYWN0ZXJzICogdGhpcy5zbG90V2lkdGggKyBNYXRoLmFicyhwdXBwZXQuY29udGFpbmVyLndpZHRoKSA6IC8vIFN0YXJ0aW5nIHJpZ2h0IG9mIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAocG9zIC0gMC41KSAqIHRoaXMuc2xvdFdpZHRoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmRpbmcgb24gc2NyZWVuXG4gICAgICAgICAgICAgICAgcHVwcGV0LmNvbnRhaW5lci54ID0gaW50ZXJwb2xhdGlvbiA9PT0gMSA/IHN0YXJ0IDogc3RhcnQgKyAoZW5kIC0gc3RhcnQpICogaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHB1cHBldC5iYWJibGluZykge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBob3cgbG9uZyBlYWNoIGZhY2UgcGFydCBoYXMgYmVlbiBvbiBkaXNwbGF5XG4gICAgICAgICAgICAgICAgcHVwcGV0LmV5ZXNBbmltICs9IGRlbHRhXG4gICAgICAgICAgICAgICAgcHVwcGV0Lm1vdXRoQW5pbSArPSBkZWx0YVxuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGV5ZXNcbiAgICAgICAgICAgICAgICBpZiAocHVwcGV0LmV5ZXNBbmltID49IHB1cHBldC5leWVzRHVyYXRpb24gJiYgKHB1cHBldC5lbW90ZSA9PT0gJzAnIHx8ICFwdXBwZXQuZW1vdGVzW3B1cHBldC5lbW90ZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1cHBldC51cGRhdGVFeWVCYWJibGUoKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBtb3V0aFxuICAgICAgICAgICAgICAgIGlmIChwdXBwZXQubW91dGhBbmltID49IHB1cHBldC5tb3V0aER1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1cHBldC51cGRhdGVNb3V0aEJhYmJsZSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIERlYWRib25lc1N0eWxlIEJhYmJsaW5nXG4gICAgICAgICAgICAvLyBJJ20gbm90IHN1cmUgd2hhdCBQdXBwZXQgUGFscyBkb2VzLCBidXQgSSdtIHByZXR0eSBzdXJlIHRoaXMgaXNuJ3QgaXRcbiAgICAgICAgICAgIC8vIEJ1dCBJIHRoaW5rIHRoaXMgbG9va3MgXCJjbG9zZSBlbm91Z2hcIiwgYW5kIHByb2JhYmx5IHRoZSBiZXN0IEknbSBnb2luZ1xuICAgICAgICAgICAgLy8gdG8gZ2V0IHdpdGhvdXQgUm9iIGFjdHVhbGx5IHRlbGxpbmcgcGVvcGxlIGhvdyBQdXBwZXQgUGFscyBkb2VzIGl0XG4gICAgICAgICAgICBpZiAocHVwcGV0LmRlYWRib25lc1N0eWxlICYmIChwdXBwZXQuYmFiYmxpbmcgfHwgcHVwcGV0LmRlYWRib25lc0R1cmF0aW9uICE9PSAwKSkge1xuICAgICAgICAgICAgICAgIHB1cHBldC5kZWFkYm9uZXNBbmltICs9IGRlbHRhXG4gICAgICAgICAgICAgICAgaWYgKHB1cHBldC5kZWFkYm9uZXNBbmltID49IHB1cHBldC5kZWFkYm9uZXNEdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBwdXBwZXQuZGVhZGJvbmVzQW5pbSA9IDBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHB1cHBldC5iYWJibGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVwcGV0LmRlYWRib25lc0R1cmF0aW9uID0gMTAwICsgTWF0aC5yYW5kb20oKSAqIDIwMFxuICAgICAgICAgICAgICAgICAgICAgICAgcHVwcGV0LmRlYWRib25lc1N0YXJ0WSA9IHB1cHBldC5kZWFkYm9uZXNUYXJnZXRZXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXBwZXQuZGVhZGJvbmVzU3RhcnRSb3RhdGlvbiA9IHB1cHBldC5kZWFkYm9uZXNUYXJnZXRSb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgcHVwcGV0LmhlYWQuZm9yRWFjaChhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnkgPSBhLmFzc2V0LnkgKyBwdXBwZXQuZGVhZGJvbmVzU3RhcnRZXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5yb3RhdGlvbiA9IGEuYXNzZXQucm90YXRpb24gKyBwdXBwZXQuZGVhZGJvbmVzU3RhcnRSb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1cHBldC5kZWFkYm9uZXNUYXJnZXRZID0gMTAgLSBNYXRoLnJhbmRvbSgpICogMjBcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1cHBldC5kZWFkYm9uZXNUYXJnZXRSb3RhdGlvbiA9IDAuMSAtIE1hdGgucmFuZG9tKCkgKiAwLjJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1cHBldC5kZWFkYm9uZXNEdXJhdGlvbiA9IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1cHBldC5oZWFkLmZvckVhY2goYSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS55ID0gYS5hc3NldC55ICsgcHVwcGV0LmRlYWRib25lc1RhcmdldFlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnJvdGF0aW9uID0gYS5hc3NldC5yb3RhdGlvbiArIHB1cHBldC5kZWFkYm9uZXNUYXJnZXRSb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwZXJjZW50ID0gKHB1cHBldC5kZWFkYm9uZXNBbmltIC8gcHVwcGV0LmRlYWRib25lc0R1cmF0aW9uKSAqIChwdXBwZXQuZGVhZGJvbmVzQW5pbSAvIHB1cHBldC5kZWFkYm9uZXNEdXJhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgcHVwcGV0LmhlYWQuZm9yRWFjaChhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEueSA9IGEuYXNzZXQueSArIHB1cHBldC5kZWFkYm9uZXNTdGFydFkgKyAocHVwcGV0LmRlYWRib25lc1RhcmdldFkgLSBwdXBwZXQuZGVhZGJvbmVzU3RhcnRZKSAqIHBlcmNlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGEucm90YXRpb24gPSBhLmFzc2V0LnJvdGF0aW9uICsgcHVwcGV0LmRlYWRib25lc1N0YXJ0Um90YXRpb24gKyAocHVwcGV0LmRlYWRib25lc1RhcmdldFJvdGF0aW9uIC0gcHVwcGV0LmRlYWRib25lc1N0YXJ0Um90YXRpb24pICogcGVyY2VudFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5zdGFnZSlcbiAgICAgICAgUElYSS50aW1lck1hbmFnZXIudXBkYXRlKGRlbHRhIC8gMTAwMClcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhZ2VcbiJdfQ==